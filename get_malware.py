"""
@Time    : 2021/7/20 14:39
-------------------------------------------------
@Author  : sailorlee(lizeyi)
@email   : chrislistudy@163.com
-------------------------------------------------
@FileName: get_malware.py
@Software: PyCharm
"""
from scapy.all import *
import scapy.all as scapy
from time import strftime, localtime
import socket
import dpkt

malware_pcap = './malware_flow/test2.pcap'
file = './data_flow/5_25_flow.pcap'
log = './log/2021-05-25.log'

class ParsePcap(object):
    def __init__(self, pcap_file,log):
        self.file = pcap_file
        self.log = log


    def get_pcap(self):
        f = open(self.file,'rb')
        return dpkt.pcap.Reader(f)

    def get_pcap_fromdata(self):

        pcap = self.get_pcap()
        malware_ip = self.get_log()
        id = 0
        for timestamp, buf in pcap:
            # 解析以太网层
            # id += 1
            # print("number:",id)
            eth = dpkt.ethernet.Ethernet(buf)
            # 判断是否为IP层，如果不是，下一次循环
            if not isinstance(eth.data, dpkt.ip.IP):
                continue
            ip = eth.data
            # 目的地
            dst_ip_str_test = socket.inet_ntoa(ip.dst)
            # 源地址
            src_ip_str = socket.inet_ntoa(ip.src)

            # print(dst_ip_str_test)
            # print(src_ip_str)
            # 过滤掉ICMP

            if (isinstance(ip.data, dpkt.tcp.TCP) or isinstance(ip.data, dpkt.udp.UDP)):

                transform_layer = ip.data

                s_port = transform_layer.sport
                s_port = str(s_port)
                d_port = transform_layer.dport
                d_port = str(d_port)
                for ip_ in malware_ip:
                    if (src_ip_str == ip_[0]):
                        if (s_port == ip_[1] and d_port == ip_[2]):

                            if(ip_[3] == '(static)' or ip_[3]=='"(static)'):
                                malware_name = ip_[4]+ip_[5]
                                date_str = malware_name[1:]
                                date_str = date_str[:-1]
                                scapy.wrpcap("./malware_flow/%s.pcap"%date_str, buf, append=True)
                                print(strftime("%Y-%m-%d %H:%M:%S", localtime()) + " 成功写入一条静态pcap")
                            else:
                                scapy.wrpcap(malware_pcap, buf, append=True)
                                print(strftime("%Y-%m-%d %H:%M:%S", localtime()) + " 成功写入一条pcap")
                    elif(dst_ip_str_test == ip_[0]):
                        if (s_port == ip_[2] and d_port == ip_[1]):
                            if (ip_[3] == '(static)' or ip_[3] == '"(static)'):
                                malware_name = ip_[4] + ip_[5]
                                date_str = malware_name[1:]
                                date_str = date_str[:-1]
                                scapy.wrpcap("./malware_flow/%s.pcap" % date_str, buf, append=True)
                                print(strftime("%Y-%m-%d %H:%M:%S", localtime()) + " 成功写入一条静态pcap")
                            else:
                                scapy.wrpcap(malware_pcap, buf, append=True)
                                print(strftime("%Y-%m-%d %H:%M:%S", localtime()) + " 成功写入一条pcap")
            else:
                continue

            # self.data_list.append(tcp.data)
        return "写入完毕！"

    def get_log(self):
        print(strftime("%Y-%m-%d %H:%M:%S", localtime()) + " 开始处理log")
        fp = open(self.log)
        malware_ip = []
        for line in fp.readlines():  # 遍历每一行
            date_str = line.split(" ")  # 每行取前14个字母，作为下面新建文件的名称

            col = []
            col.append(date_str[3])
            col.append(date_str[4])
            col.append(date_str[6])
            col.append(date_str[12])
            col.append(date_str[10])
            col.append(date_str[11])
            malware_ip.append(col)

        fp.close()
        print(strftime("%Y-%m-%d %H:%M:%S", localtime()) + " log处理完毕,开始读取pcap！")
        return malware_ip

if __name__ == '__main__':
    parse = ParsePcap(file,log)
    parse.get_pcap_fromdata()